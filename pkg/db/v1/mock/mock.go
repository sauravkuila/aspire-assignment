// Code generated by MockGen. DO NOT EDIT.
// Source: aspire-assignment/pkg/db/v1 (interfaces: V1DBLayer)

// Package mock is a generated GoMock package.
package mock

import (
	loan "aspire-assignment/pkg/db/v1/loan"
	usermanagement "aspire-assignment/pkg/db/v1/usermanagement"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockV1DBLayer is a mock of V1DBLayer interface.
type MockV1DBLayer struct {
	ctrl     *gomock.Controller
	recorder *MockV1DBLayerMockRecorder
}

// MockV1DBLayerMockRecorder is the mock recorder for MockV1DBLayer.
type MockV1DBLayerMockRecorder struct {
	mock *MockV1DBLayer
}

// NewMockV1DBLayer creates a new mock instance.
func NewMockV1DBLayer(ctrl *gomock.Controller) *MockV1DBLayer {
	mock := &MockV1DBLayer{ctrl: ctrl}
	mock.recorder = &MockV1DBLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockV1DBLayer) EXPECT() *MockV1DBLayerMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockV1DBLayer) AddUser(arg0 *gin.Context, arg1 usermanagement.UserDetails) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockV1DBLayerMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockV1DBLayer)(nil).AddUser), arg0, arg1)
}

// CancelLoan mocks base method.
func (m *MockV1DBLayer) CancelLoan(arg0 *gin.Context, arg1, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLoan", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelLoan indicates an expected call of CancelLoan.
func (mr *MockV1DBLayerMockRecorder) CancelLoan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLoan", reflect.TypeOf((*MockV1DBLayer)(nil).CancelLoan), arg0, arg1, arg2)
}

// CreateLoan mocks base method.
func (m *MockV1DBLayer) CreateLoan(arg0 *gin.Context, arg1 int64, arg2 float64, arg3 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockV1DBLayerMockRecorder) CreateLoan(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockV1DBLayer)(nil).CreateLoan), arg0, arg1, arg2, arg3)
}

// FetchLoanDetails mocks base method.
func (m *MockV1DBLayer) FetchLoanDetails(arg0 *gin.Context, arg1 int64) (loan.LoanDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLoanDetails", arg0, arg1)
	ret0, _ := ret[0].(loan.LoanDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLoanDetails indicates an expected call of FetchLoanDetails.
func (mr *MockV1DBLayerMockRecorder) FetchLoanDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLoanDetails", reflect.TypeOf((*MockV1DBLayer)(nil).FetchLoanDetails), arg0, arg1)
}

// GetUnapprovedLoans mocks base method.
func (m *MockV1DBLayer) GetUnapprovedLoans(arg0 *gin.Context) ([]loan.UnApprovedLoan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnapprovedLoans", arg0)
	ret0, _ := ret[0].([]loan.UnApprovedLoan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnapprovedLoans indicates an expected call of GetUnapprovedLoans.
func (mr *MockV1DBLayerMockRecorder) GetUnapprovedLoans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnapprovedLoans", reflect.TypeOf((*MockV1DBLayer)(nil).GetUnapprovedLoans), arg0)
}

// GetUserByUsername mocks base method.
func (m *MockV1DBLayer) GetUserByUsername(arg0 *gin.Context, arg1 string) (usermanagement.UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(usermanagement.UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockV1DBLayerMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockV1DBLayer)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserLoanInstallments mocks base method.
func (m *MockV1DBLayer) GetUserLoanInstallments(arg0 *gin.Context, arg1, arg2 int64) ([]loan.InstallmentDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoanInstallments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]loan.InstallmentDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLoanInstallments indicates an expected call of GetUserLoanInstallments.
func (mr *MockV1DBLayerMockRecorder) GetUserLoanInstallments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoanInstallments", reflect.TypeOf((*MockV1DBLayer)(nil).GetUserLoanInstallments), arg0, arg1, arg2)
}

// GetUserLoans mocks base method.
func (m *MockV1DBLayer) GetUserLoans(arg0 *gin.Context, arg1 int64) ([]loan.LoanDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoans", arg0, arg1)
	ret0, _ := ret[0].([]loan.LoanDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLoans indicates an expected call of GetUserLoans.
func (mr *MockV1DBLayerMockRecorder) GetUserLoans(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoans", reflect.TypeOf((*MockV1DBLayer)(nil).GetUserLoans), arg0, arg1)
}

// ModifyLoan mocks base method.
func (m *MockV1DBLayer) ModifyLoan(arg0 *gin.Context, arg1, arg2 int64, arg3 float64, arg4 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyLoan", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyLoan indicates an expected call of ModifyLoan.
func (mr *MockV1DBLayerMockRecorder) ModifyLoan(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyLoan", reflect.TypeOf((*MockV1DBLayer)(nil).ModifyLoan), arg0, arg1, arg2, arg3, arg4)
}

// UpdateAndInsertInstallments mocks base method.
func (m *MockV1DBLayer) UpdateAndInsertInstallments(arg0 *gin.Context, arg1 int64, arg2 float64, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAndInsertInstallments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAndInsertInstallments indicates an expected call of UpdateAndInsertInstallments.
func (mr *MockV1DBLayerMockRecorder) UpdateAndInsertInstallments(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAndInsertInstallments", reflect.TypeOf((*MockV1DBLayer)(nil).UpdateAndInsertInstallments), arg0, arg1, arg2, arg3)
}

// UpdateInstallment mocks base method.
func (m *MockV1DBLayer) UpdateInstallment(arg0 *gin.Context, arg1 int64, arg2 []loan.InstallmentDetails, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstallment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstallment indicates an expected call of UpdateInstallment.
func (mr *MockV1DBLayerMockRecorder) UpdateInstallment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstallment", reflect.TypeOf((*MockV1DBLayer)(nil).UpdateInstallment), arg0, arg1, arg2, arg3)
}

// UpdateSingleInstallmentPayment mocks base method.
func (m *MockV1DBLayer) UpdateSingleInstallmentPayment(arg0 *gin.Context, arg1 int64, arg2 loan.InstallmentDetails, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSingleInstallmentPayment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSingleInstallmentPayment indicates an expected call of UpdateSingleInstallmentPayment.
func (mr *MockV1DBLayerMockRecorder) UpdateSingleInstallmentPayment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSingleInstallmentPayment", reflect.TypeOf((*MockV1DBLayer)(nil).UpdateSingleInstallmentPayment), arg0, arg1, arg2, arg3)
}

// UpdateUnapprovedLoan mocks base method.
func (m *MockV1DBLayer) UpdateUnapprovedLoan(arg0 *gin.Context, arg1 int64, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnapprovedLoan", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnapprovedLoan indicates an expected call of UpdateUnapprovedLoan.
func (mr *MockV1DBLayerMockRecorder) UpdateUnapprovedLoan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnapprovedLoan", reflect.TypeOf((*MockV1DBLayer)(nil).UpdateUnapprovedLoan), arg0, arg1, arg2)
}
